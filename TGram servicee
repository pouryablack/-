import telebot
from telebot import types
import logging
import datetime
import time

# تنظیم لاگ برای دیباگ
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# اطلاعات ربات
TOKEN = "8120534894:AAGqGH-kfv2sgU2BeYT9bHDB8M0LkM43gqw"
ADMIN_ID_MAIN = 5145620503
ADMIN_ID_SECONDARY = 6811076207
CHANNEL_USERNAME = "@premiumgiftshoop"
ADMIN_TAG_MAIN = "@pourya_xo"
ADMIN_TAG_SECONDARY = "@Moeinodow"
CARD_NUMBER = "5859831209300457"
CARD_OWNER = "پوریا پروینی"
BANK_NAME = "بانک تجارت"

bot = telebot.TeleBot(TOKEN)

# محصولات پرمیوم
premium_products = {
    "premium_3": {"name": "اشتراک 3 ماهه", "price": "1,100,000 تومان", "description": "اشتراک 3 ماهه با امکانات ویژه"},
    "premium_6": {"name": "اشتراک 6 ماهه", "price": "1,450,000 تومان", "description": "اشتراک 6 ماهه با امکانات ویژه"},
    "premium_12": {"name": "اشتراک 1 ساله", "price": "2,550,000 تومان", "description": "اشتراک 1 ساله با امکانات ویژه"}
}

# محصولات استارز
star_products = {
    "star_50": {"name": "50 استار", "price": "75,000 تومان", "description": "50 استار برای استفاده در پلتفرم"},
    "star_75": {"name": "75 استار", "price": "110,000 تومان", "description": "75 استار برای استفاده در پلتفرم"},
    "star_100": {"name": "100 استار", "price": "140,000 تومان", "description": "100 استار برای استفاده در پلتفرم"},
    "star_150": {"name": "150 استار", "price": "220,000 تومان", "description": "150 استار برای استفاده در پلتفرم"},
    "star_250": {"name": "250 استار", "price": "330,000 تومان", "description": "250 استار برای استفاده در پلتفرم"},
    "star_350": {"name": "350 استار", "price": "475,000 تومان", "description": "350 استار برای استفاده در پلتفرم"},
    "star_more": {"name": "سفارش بیشتر", "price": None, "description": "سفارش استارهای بیشتر با هماهنگی ادمین"}
}

orders = {}

def is_user_subscribed(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"خطا در بررسی عضویت کاربر {user_id}: {e}")
        return False

def show_main_panel(chat_id, message_id=None):
    if not is_user_subscribed(chat_id):
        markup = types.InlineKeyboardMarkup()
        channel_url = f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
        markup.add(types.InlineKeyboardButton("📢 عضویت در کانال", url=channel_url))
        markup.add(types.InlineKeyboardButton("✅ عضویت انجام شد", callback_data="check_join"))
        bot.send_message(chat_id, f"⛔ عضویت در کانال {CHANNEL_USERNAME} اجباری است! لطفاً بپیوندید.", reply_markup=markup)
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row("ℹ️ راهنمای استفاده", "💎 پنل پرمیوم", "⭐ پنل استارز")
    markup.row("🧑‍💼 ارتباط با ادمین", "📋 وضعیت سفارش")
    markup.row("📍 Menu")
    
    welcome_text = (
        "به ربات ما خوش آمدید! برای شروع، یکی از گزینه‌های زیر را انتخاب کنید:\n"
        "- 💎 پنل پرمیوم: اشتراک‌های ویژه\n"
        "- ⭐ پنل استارز: استارهای جذاب\n"
        "- ℹ️ راهنمای استفاده: اطلاعات بیشتر\n"
        "- 📋 وضعیت سفارش: بررسی سفارش‌ها\n"
        "- 🧑‍💼 ارتباط با ادمین: پشتیبانی"
    )
    
    if message_id:
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            logging.error(f"خطا در حذف پیام {message_id} برای کاربر {chat_id}: {e}")
    
    bot.send_message(chat_id, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    show_main_panel(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "check_join")
def check_join(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    if is_user_subscribed(user_id):
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="✅ عضویت شما با موفقیت تأیید شد! حالا می‌توانید از ربات استفاده کنید.",
            reply_markup=None
        )
        show_main_panel(chat_id)
    else:
        bot.answer_callback_query(call.id, "⛔ هنوز عضو کانال نیستید! بپیوندید.")
        logging.info(f"کاربر {user_id} بررسی عضویت را رد کرد")

@bot.message_handler(func=lambda m: m.text == "ℹ️ راهنمای استفاده")
def show_guide(message):
    if not is_user_subscribed(message.chat.id):
        show_main_panel(message.chat.id)
        return
    
    guide_text = (
        "🎯 راهنمای استفاده از ربات:\n\n"
        "1. برای خرید پرمیوم یا استارز، به پنل مربوطه بروید.\n"
        "2. یوزرنیم با @ وارد کنید (حداقل ۵ کاراکتر).\n"
        "3. پرداخت را از طریق کارت به کارت انجام دهید.\n"
        "4. وضعیت سفارش خود را با دکمه 'وضعیت سفارش' چک کنید.\n"
        "5. برای پشتیبانی، با ادمین‌ها تماس بگیرید.\n\n"
        "📌 نکته: عضویت در کانال اجباری است!\n"
        "⏳ زمان تحویل: 5 دقیقه تا 1 ساعت"
    )
    bot.send_message(message.chat.id, guide_text)

@bot.message_handler(func=lambda m: m.text == "💎 پنل پرمیوم")
def show_premium_panel(message):
    if not is_user_subscribed(message.chat.id):
        show_main_panel(message.chat.id)
        return
    
    markup = types.InlineKeyboardMarkup()
    for key, product in premium_products.items():
        markup.add(types.InlineKeyboardButton(
            f"{product['name']} - {product['price']}", 
            callback_data=f"premium_{key}"
        ))
    
    back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    back_markup.row("🔙 برگشت")
    
    info_text = (
        "💎 پنل پرمیوم:\n"
        "پرمیوم‌ها به‌صورت گیفت اختصاصی برای شما ارسال می‌شوند!\n"
        "⏳ زمان تحویل: بین ۵ دقیقه تا ۱ ساعت در طول روز"
    )
    
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"خطا در حذف پیام منوی اصلی برای کاربر {message.chat.id}: {e}")
    
    bot.send_message(message.chat.id, info_text, reply_markup=markup)
    bot.send_message(
        message.chat.id, 
        "لطفاً یکی از محصولات را انتخاب کنید یا برای بازگشت به منوی اصلی، دکمه زیر را بزنید.", 
        reply_markup=back_markup
    )

@bot.message_handler(func=lambda m: m.text == "⭐ پنل استارز")
def show_star_panel(message):
    if not is_user_subscribed(message.chat.id):
        show_main_panel(message.chat.id)
        return
    
    markup = types.InlineKeyboardMarkup()
    for key, product in star_products.items():
        price_text = "تماس با ادمین" if product['price'] is None else product['price']
        markup.add(types.InlineKeyboardButton(
            f"{product['name']} - {price_text}", 
            callback_data=f"star_{key}"
        ))
    
    back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    back_markup.row("🔙 برگشت")
    
    info_text = (
        "⭐ پنل استارز:\n"
        "استارزها به‌صورت گیفت جذاب برای شما ارسال می‌شوند!\n"
        "⏳ زمان تحویل: بین ۵ دقیقه تا ۱ ساعت"
    )
    
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"خطا در حذف پیام منوی اصلی برای کاربر {message.chat.id}: {e}")
    
    bot.send_message(message.chat.id, info_text, reply_markup=markup)
    bot.send_message(
        message.chat.id, 
        "لطفاً یکی از محصولات را انتخاب کنید یا برای بازگشت به منوی اصلی، دکمه زیر را بزنید.", 
        reply_markup=back_markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith(("premium_", "star_")))
def process_product(call):
    user_id = call.from_user.id
    if not is_user_subscribed(user_id):
        show_main_panel(user_id)
        return
    
    product_type, product_key = call.data.split("_", 1)
    
    if product_type == "premium":
        product = premium_products.get(product_key)
    else:  # star
        product = star_products.get(product_key)
    
    if not product:
        bot.send_message(user_id, "❌ محصول نامعتبر!")
        logging.error(f"محصول نامعتبر انتخاب شد: {call.data}")
        return
    
    if product_type == "star" and product_key == "star_more":
        bot.send_message(
            user_id,
            f"اگر قصد سفارش بیشتری دارید لطفاً به آیدی ادمین پیام بدید و مقدار خودتون رو مشخص کنید ممنونم از توجهتون\n"
            f"آیدی ادمین: {ADMIN_TAG_MAIN}"
        )
        try:
            bot.delete_message(user_id, call.message.message_id)
        except Exception as e:
            logging.error(f"خطا در حذف پیام پنل استارز برای کاربر {user_id}: {e}")
        return
    
    orders[user_id] = {
        "product": product['name'], 
        "status": "در انتظار تأیید", 
        "price": product['price'],
        "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "type": product_type,
        "last_message_id": call.message.message_id
    }
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row("🚫 کنسل سفارش")
    
    product_info = (
        f"📦 محصول انتخاب‌شده:\n"
        f"🏷 نام: {product['name']}\n"
        f"💰 قیمت: {product['price']}\n"
        f"📝 توضیحات: {product['description']}\n\n"
        f"⚠️ لطفاً یوزرنیم با @ وارد کنید (حداقل ۵ کاراکتر بدون احتساب @):"
    )
    
    try:
        bot.delete_message(user_id, call.message.message_id)
    except Exception as e:
        logging.error(f"خطا در حذف پیام انتخاب محصول برای کاربر {user_id}: {e}")
    
    sent_message = bot.send_message(user_id, product_info, reply_markup=markup)
    orders[user_id]["last_message_id"] = sent_message.message_id
    bot.register_next_step_handler_by_chat_id(user_id, process_username, product)

def process_username(message, product):
    user_id = message.chat.id
    if not is_user_subscribed(user_id):
        show_main_panel(user_id)
        return
    
    if message.text == "🚫 کنسل سفارش":
        if user_id in orders:
            try:
                bot.delete_message(user_id, orders[user_id]["last_message_id"])
            except Exception as e:
                logging.error(f"خطا در حذف پیام یوزرنیم برای کاربر {user_id}: {e}")
            del orders[user_id]
            bot.send_message(user_id, "✅ سفارش شما با موفقیت کنسل شد.", reply_markup=types.ReplyKeyboardRemove())
            show_main_panel(user_id)
        return
    
    username = message.text.strip()
    if not username.startswith('@'):
        bot.send_message(user_id, "❌ یوزرنیم باید با @ شروع شود!")
        bot.register_next_step_handler_by_chat_id(user_id, process_username, product)
        return
    
    username_without_at = username[1:]
    if len(username_without_at) < 5:
        bot.send_message(user_id, "❌ یوزرنیم باید حداقل ۵ کاراکتر (بدون احتساب @) داشته باشد!")
        bot.register_next_step_handler_by_chat_id(user_id, process_username, product)
        return
    
    if not all(c.isalnum() or c == '_' for c in username_without_at):
        bot.send_message(user_id, "❌ یوزرنیم فقط باید شامل حروف، اعداد و _ باشد.")
        bot.register_next_step_handler_by_chat_id(user_id, process_username, product)
        return
    
    orders[user_id]["username"] = username
    
    payment_info = (
        "🏦 پرداخت کارت به کارت:\n\n"
        f"🔢 شماره کارت:\n{CARD_NUMBER}\n"
        f"👤 نام صاحب حساب: {CARD_OWNER}\n"
        f"🏦 بانک: {BANK_NAME}\n\n"
        f"💰 مبلغ قابل پرداخت: {orders[user_id]['price']}\n"
        f"🛒 محصول: {orders[user_id]['product']}\n\n"
        "⚠️ لطفاً عکس فیش واریز را ارسال کنید یا سفارش را کنسل کنید."
    )
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row("🚫 کنسل سفارش")
    
    try:
        bot.delete_message(user_id, orders[user_id]["last_message_id"])
    except Exception as e:
        logging.error(f"خطا در حذف پیام یوزرنیم برای کاربر {user_id}: {e}")
    
    sent_message = bot.send_message(user_id, payment_info, reply_markup=markup)
    orders[user_id]["last_message_id"] = sent_message.message_id
    bot.register_next_step_handler_by_chat_id(user_id, process_receipt, product, username)

def process_receipt(message, product, username):
    user_id = message.chat.id
    if not is_user_subscribed(user_id):
        show_main_panel(user_id)
        return
    
    if message.text == "🚫 کنسل سفارش":
        if user_id in orders:
            try:
                bot.delete_message(user_id, orders[user_id]["last_message_id"])
            except Exception as e:
                logging.error(f"خطا در حذف پیام پرداخت کارت به کارت برای کاربر {user_id}: {e}")
            del orders[user_id]
            bot.send_message(user_id, "✅ سفارش کنسل شد.", reply_markup=types.ReplyKeyboardRemove())
            show_main_panel(user_id)
        return
    
    if message.content_type != 'photo':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.row("🚫 کنسل سفارش")
        bot.send_message(user_id, "❌ فقط عکس فیش را ارسال کنید.", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(user_id, process_receipt, product, username)
        return
    
    orders[user_id]["receipt"] = True
    orders[user_id]["status"] = "در انتظار بررسی ادمین"
    
    order_details = (
        f"📥 سفارش جدید (کارت به کارت):\n\n"
        f"👤 خریدار:\n"
        f"   ├ نام: {message.from_user.first_name or 'ندارد'}\n"
        f"   ├ آیدی: {user_id}\n"
        f"   └ یوزرنیم: @{message.from_user.username or 'ندارد'}\n\n"
        f"🛒 محصول:\n"
        f"   ├ نام: {product['name']}\n"
        f"   └ قیمت: {product['price']}\n\n"
        f"📝 اطلاعات اضافه:\n"
        f"   ├ یوزرنیم وارد شده: {username}\n"
        f"   ├ شماره کارت: {CARD_NUMBER}\n"
        f"   └ زمان سفارش: {orders[user_id]['timestamp']}\n\n"
        f"⏳ وضعیت: در انتظار تأیید\n"
        f"📌 نوع محصول: {orders[user_id]['type'].capitalize()}"
    )
    
    try:
        bot.delete_message(user_id, orders[user_id]["last_message_id"])
    except Exception as e:
        logging.error(f"خطا در حذف پیام پرداخت کارت به کارت برای کاربر {user_id}: {e}")
    
    try:
        bot.forward_message(ADMIN_ID_MAIN, user_id, message.message_id)
        bot.send_message(ADMIN_ID_MAIN, order_details)
        
        bot.forward_message(ADMIN_ID_SECONDARY, user_id, message.message_id)
        bot.send_message(ADMIN_ID_SECONDARY, order_details)
        
        bot.send_message(
            user_id,
            "✅ فیش واریز با موفقیت ارسال شد. لطفاً منتظر تأیید ادمین باشید.\n"
            "⏳ معمولاً بین ۵ دقیقه تا ۱ ساعت زمان می‌برد.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        show_main_panel(user_id)
        
    except Exception as e:
        logging.error(f"خطا در ارسال فیش: {e}")
        bot.send_message(
            user_id,
            f"⚠️ خطا در ارسال فیش! لطفاً با ادمین تماس بگیرید: {ADMIN_TAG_MAIN}",
            reply_markup=types.ReplyKeyboardRemove()
        )

@bot.message_handler(func=lambda m: m.text == "📋 وضعیت سفارش")
def check_order_status(message):
    if not is_user_subscribed(message.chat.id):
        show_main_panel(message.chat.id)
        return
    
    user_id = message.chat.id
    if user_id not in orders:
        bot.send_message(user_id, "❌ شما سفارشی ثبت نکرده‌اید!")
        return
    
    order = orders[user_id]
    status_text = (
        f"📋 وضعیت سفارش شما:\n\n"
        f"🛒 محصول: {order['product']}\n"
        f"💰 مبلغ: {order['price']}\n"
        f"💳 روش پرداخت: کارت به کارت\n"
        f"🕒 زمان سفارش: {order['timestamp']}\n"
        f"📌 وضعیت: {order['status']}\n"
        f"📦 نوع: {order['type'].capitalize()}\n\n"
    )
    
    if order['status'] == "در انتظار بررسی ادمین":
        status_text += "⏳ لطفاً صبور باشید، در حال بررسی توسط ادمین..."
    elif order['status'] == "تأیید شده":
        status_text += "✅ سفارش شما تأیید شده است. به زودی تکمیل می‌شود."
    elif order['status'] == "تکمیل شده":
        status_text += "🎉 سفارش شما با موفقیت تکمیل شد!"
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.row("🔙 برگشت")
    
    bot.send_message(user_id, status_text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "🧑‍💼 ارتباط با ادمین")
def contact_admin(message):
    if not is_user_subscribed(message.chat.id):
        show_main_panel(message.chat.id)
        return
    
    admin_info = (
        "📞 برای ارتباط با ادمین‌ها:\n\n"
        f"👤 ادمین اصلی: {ADMIN_TAG_MAIN}\n"
        f"👤 ادمین دوم: {ADMIN_TAG_SECONDARY}\n\n"
        "⏳ پاسخ معمولاً در کمتر از ۱ ساعت"
    )
    
    bot.send_message(message.chat.id, admin_info)

@bot.message_handler(func=lambda m: m.text in ["🔙 برگشت", "📍 Menu"])
def back_to_menu(message):
    show_main_panel(message.chat.id, message.message_id)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in [ADMIN_ID_MAIN, ADMIN_ID_SECONDARY]:
        bot.reply_to(message, "❌ دسترسی محدود به ادمین‌ها!")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("📦 لیست سفارشات", "🔄 آپدیت وضعیت")
    markup.row("🔙 منوی اصلی")
    
    bot.send_message(
        message.chat.id,
        "👨‍💼 پنل مدیریت:\n\n"
        "📦 لیست سفارشات: مشاهده تمام سفارشات\n"
        "🔄 آپدیت وضعیت: تغییر وضعیت سفارشات\n"
        "📌 نکته: برای تأیید یا تکمیل سریع، از /confirm یا /complete استفاده کنید.",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "📦 لیست سفارشات" and m.from_user.id in [ADMIN_ID_MAIN, ADMIN_ID_SECONDARY])
def list_orders(message):
    if not orders:
        bot.send_message(message.chat.id, "📭 هیچ سفارشی ثبت نشده است.")
        return
    
    orders_list = []
    for user_id, order in orders.items():
        try:
            user = bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else "ندارد"
            orders_list.append(
                f"👤 کاربر: {user.first_name or 'ندارد'} (آیدی: {user_id}, یوزرنیم: {username})\n"
                f"🛒 محصول: {order['product']}\n"
                f"💰 قیمت: {order['price']}\n"
                f"💳 روش پرداخت: کارت به کارت\n"
                f"🕒 زمان: {order['timestamp']}\n"
                f"📌 وضعیت: {order['status']}\n"
                f"📦 نوع: {order['type'].capitalize()}\n"
                f"🔢 شماره سفارش: {hash(str(user_id) + order['timestamp'])}\n"
                "━━━━━━━━━━━━━━━━━━━━"
            )
        except Exception as e:
            logging.error(f"خطا در دریافت اطلاعات کاربر {user_id}: {e}")
            continue
    
    if not orders_list:
        bot.send_message(message.chat.id, "❌ خطا در دریافت اطلاعات سفارشات.")
        return
    
    chunk_size = 5
    for i in range(0, len(orders_list), chunk_size):
        chunk = "\n\n".join(orders_list[i:i+chunk_size])
        bot.send_message(message.chat.id, f"📦 لیست سفارشات:\n\n{chunk}")

@bot.message_handler(func=lambda m: m.text == "🔄 آپدیت وضعیت" and m.from_user.id in [ADMIN_ID_MAIN, ADMIN_ID_SECONDARY])
def update_order_status(message):
    if not orders:
        bot.send_message(message.chat.id, "📭 هیچ سفارشی برای آپدیت وجود ندارد.")
        return
    
    markup = types.ForceReply(selective=False)
    bot.send_message(
        message.chat.id,
        "لطفاً آیدی کاربر و وضعیت جدید را به فرمت زیر ارسال کنید:\n\n"
        "آیدی_کاربر,وضعیت_جدید\n\n"
        "مثال:\n"
        "123456789,تأیید شده\n\n"
        "وضعیت‌های ممکن: تأیید شده, رد شده, تکمیل شده\n"
        "📌 یا از /confirm و /complete برای تأیید یا تکمیل سریع استفاده کنید.",
        reply_markup=markup
    )
    
    bot.register_next_step_handler(message, process_status_update)

def process_status_update(message):
    try:
        if message.text == "🔙 منوی اصلی":
            show_main_panel(message.chat.id, message.message_id)
            return
        
        user_id, new_status = message.text.split(',')
        user_id = int(user_id.strip())
        new_status = new_status.strip()
        
        if user_id not in orders:
            bot.send_me
